#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void bubbleSort(int arr[], int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(&arr[j], &arr[j + 1]);
            }
        }
    }
}

double calcularPromedio(double tiempos[], int n) {
    double suma = 0.0;
    for (int i = 0; i < n; i++) {
        suma += tiempos[i];
    }
    return suma / n;
}

double calcularMinimo(double tiempos[], int n) {
    double minimo = tiempos[0];
    for (int i = 1; i < n; i++) {
        if (tiempos[i] < minimo) {
            minimo = tiempos[i];
        }
    }
    return minimo;
}

double calcularMaximo(double tiempos[], int n) {
    double maximo = tiempos[0];
    for (int i = 1; i < n; i++) {
        if (tiempos[i] > maximo) {
            maximo = tiempos[i];
        }
    }
    return maximo;
}

int main() {
    int arr[10000];
    srand(time(0));

    for (int i = 0; i < 10000; i++) {
        arr[i] = rand();
    }

    clock_t start, end;
    double tiempos[100];

    for (int i = 0; i < 100; i++) {
        int tempArr[10000];
        for (int j = 0; j < 10000; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        insertionSort(tempArr, 10000);
        end = clock();
        tiempos[i] = ((double)(end - start)) / CLOCKS_PER_SEC * 1000;
    }

    printf("Insertion Sort:\n");
    printf("Tiempo promedio: %lf milisegundos\n", calcularPromedio(tiempos, 100));
    printf("Tiempo minimo: %lf milisegundos\n", calcularMinimo(tiempos, 100));
    printf("Tiempo maximo: %lf milisegundos\n\n", calcularMaximo(tiempos, 100));

    for (int i = 0; i < 100; i++) {
        int tempArr[10000];
        for (int j = 0; j < 10000; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        quickSort(tempArr, 0, 9999);
        end = clock();
        tiempos[i] = ((double)(end - start)) / CLOCKS_PER_SEC * 1000;
    }

    printf("Quick Sort:\n");
    printf("Tiempo promedio: %lf milisegundos\n", calcularPromedio(tiempos, 100));
    printf("Tiempo minimo: %lf milisegundos\n", calcularMinimo(tiempos, 100));
    printf("Tiempo maximo: %lf milisegundos\n\n", calcularMaximo(tiempos, 100));

    for (int i = 0; i < 100; i++) {
        int tempArr[10000];
        for (int j = 0; j < 10000; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        quickSort(tempArr, 0, 9999);
        end = clock();
        tiempos[i] = ((double)(end - start)) / CLOCKS_PER_SEC * 1000;
    }

    printf("Bubble Sort:\n");
    printf("Tiempo promedio: %lf milisegundos\n", calcularPromedio(tiempos, 100));
    printf("Tiempo minimo: %lf milisegundos\n", calcularMinimo(tiempos, 100));
    printf("Tiempo maximo: %lf milisegundos\n\n", calcularMaximo(tiempos, 100));
    
    for (int i = 0; i < 100; i++) {
        int tempArr[10000];
        for (int j = 0; j < 10000; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        bubbleSort(tempArr, 10000);
        end = clock();
        tiempos[i] = ((double)(end - start)) / CLOCKS_PER_SEC * 1000;
    }
    
    return 0;
}
